from catboost import CatBoostClassifier
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np


class CatBoost():

    def __init__(self, model_params=None):
        catboost_params = {
            # link to hpyerparameter documentation:
            # https://tech.yandex.com/catboost/doc/dg/concepts/python-reference_parameters-list-docpage/
            'iterations': None,
            'learning_rate': None,
            'depth': None,
            'loss_function': 'Logloss',
            # 'border_count': 4,
            # 'feature_border_type': 'MinEntropy',
            'leaf_estimation_iterations': 5,
            'leaf_estimation_method': 'Gradient',
            'boosting_type': 'Plain',
        }

        self.model_params = catboost_params
        if model_params is not None:
            self.model_params.update(model_params)
        self.model = CatBoostClassifier()
        self.features = None

    def fit(self, X_train, y_train, **kwargs):
        self.model.set_params(**kwargs)
        self.model.fit(X_train, y_train)
        self.features = X_train.columns

    def predict(self, X):
        return self.model.predict_proba(X)[:, 1]

    def get_params(self):
        return self.model.get_params()

    def get_features_importances(self):
        if self.features is None:
            return None
        else:
            return pd.Series(data=self.model.feature_importances_, index=self.features).sort_values(ascending=False)

    def plot_features_importances(self):
        if self.features is not None:
            y_pos = np.arange(len(self.features))
            plt.bar(y_pos, self.model.feature_importances_, align='center', alpha=0.5)
            plt.xticks(y_pos, self.features)
            plt.title("Feature Importance Generated by CatBoost")
            x = plt.gca().xaxis
            for item in x.get_ticklabels():
                item.set_rotation(90)
            plt.show()
